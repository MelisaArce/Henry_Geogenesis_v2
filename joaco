que hay q decir

import streamlit as st
from connect import cursor, conn, obtener_datos
import matplotlib.pyplot as plt
import matplotlib
import seaborn as sns
import warnings
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

warnings.filterwarnings("ignore")


usa_states = pd.read_csv("../files/data/usa_states.csv")
usa_cities = pd.read_csv("../files/data/usa_cities.csv")
clients = pd.read_csv("../files/data/usa_clients.csv", index_col=0)
usa_attractions = pd.read_csv("../files/data/usa_attractions.csv", index_col=0)
usa_attractions["n_reviews"].fillna(usa_attractions["n_reviews"].mean() ,inplace=True)

hotels = pd.read_csv("../files/data/usa_hotels.csv", index_col=0)
hotels = pd.merge(hotels, usa_states[['state', 'state_id']], on='state', how="left")
hotels = pd.merge(hotels, usa_cities[['city', 'state_id', 'latitude', 'longitude', 'population']], on=['state_id', 'city'], how='left')




st.set_page_config(
    layout="wide",
    initial_sidebar_state="expanded",
    page_title="Tu Aplicación",
    page_icon=":chart_with_upwards_trend:"
)


# FILTER

# Create hotel filters
st.sidebar.markdown("### Filters")


all_regions = usa_attractions["region"].unique()  # Utiliza unique() en lugar de is_unique()
selected_regions = st.sidebar.multiselect('Region', all_regions, default=all_regions)


all_categories = usa_attractions['new_categories'].unique()
selected_attractions_categories = st.sidebar.multiselect('Attraction categories', all_categories, default=all_categories)

filtered_attractions = usa_attractions[(usa_attractions["new_categories"].isin(selected_attractions_categories) & (usa_attractions["region"].isin(selected_regions)))]

state_ids = filtered_attractions["state_id"].unique()
filtered_hotels = hotels[hotels["state_id"].isin(state_ids)]


hotel_count_by_city = filtered_hotels.groupby(['city', 'state']).size().reset_index(name='hotel_count')
hotel_count_by_city = pd.merge(hotel_count_by_city, usa_states[['state', 'state_id']], on='state', how="left")
hotel_count_by_city = pd.merge(hotel_count_by_city, usa_cities[['city', 'state_id', 'latitude', 'longitude', 'population']], on=['state_id', 'city'], how='left')
hotel_count_by_city = hotel_count_by_city.sort_values(by=['hotel_count'], ascending=False)


# GRAFICOS

# Crear el mapa de ciudades primero
cities_map = px.scatter_geo(
    hotel_count_by_city,
    lat="latitude",
    lon="longitude",
    size="hotel_count",
    color_discrete_sequence=["blue"],
    title="Geographic distribution:",
    width=1000,
    height=900,
    scope="usa")
cities_map.update_traces(marker=dict(line=dict(width=0)), opacity=0.7)  # Ajustar la opacidad
cities_map.update_layout(title_x=0.7)

# Crear el mapa de atracciones después
attractions_map = px.scatter_geo(
    filtered_attractions,
    lat="latitud",
    lon="longitude",
    size="n_reviews",
    title="Geographic distribution:",
    color_discrete_sequence=["red"],
    width=1000,
    height=900,
    scope="usa")
attractions_map.update_traces(marker=dict(line=dict(width=0)))  # Esto elimina la línea de borde

for trace in attractions_map.data:
    cities_map.add_trace(trace)


# Gráfico de barras de las 10 atracciones más frecuentes con Plotly
top_attractions = filtered_attractions['new_categories'].value_counts().nlargest(10)
bar_chart = px.bar(
    y=top_attractions.values,
    x=top_attractions.index,
    orientation='v',
    title="Top attractions:",
    color_discrete_sequence=["red"],
    width=300,
    height=300,)
bar_chart.update_layout(margin=dict(b=1))


top_cities = px.bar(hotel_count_by_city.head(10), x='city', y='hotel_count', height=300, width=300, title='Top cities with most hotels:')


from scipy import stats
def remove_outliers_zscore(df, column, threshold=3):
    z_scores = stats.zscore(df[column])
    df_no_outliers = df[(z_scores < threshold) & (z_scores > -threshold)]
    return df_no_outliers

filtered_hotels_no_outliers = remove_outliers_zscore(filtered_hotels, "price")
filtered_hotels_no_outliers = filtered_hotels_no_outliers[filtered_hotels_no_outliers['avg_score'] != 10]

scatter_plot = px.scatter(
    filtered_hotels_no_outliers,
    x="price",  # Replace with the actual column you want on the x-axis
    y="avg_score",  # Replace with the actual column you want on the y-axis
    title="Price/Score relation:",
    width=300,
    height=300,
    opacity=0.25)


col1, col2 = st.columns((2, 5))

with col1:
    st.plotly_chart(bar_chart, use_container_width=True)
    st.plotly_chart(top_cities, use_container_width=True)
    st.plotly_chart(scatter_plot, use_container_width=True)

with col2:
    st.plotly_chart(cities_map, use_container_width=True)




    ---------------------------------

    import streamlit as st
from connect import cursor, conn
import matplotlib.pyplot as plt
import matplotlib
import seaborn as sns
import warnings
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

warnings.filterwarnings("ignore")

usa_states = pd.read_csv("../files/data/usa_states.csv")
usa_cities = pd.read_csv("../files/data/usa_cities.csv")
clients = pd.read_csv("../files/data/usa_clients.csv", index_col=0)
california_hotels = pd.read_csv("../files/data/booking/california_hotels.csv", index_col=0)
matrix = pd.read_csv("../files/data/booking/california_hotels_similarity_matrix.csv", index_col=0)
df_reviews = pd.read_csv("../files/data/usa_clients_reviews.csv")
df_reviews['date'] = pd.to_datetime(df_reviews['date'])


st.set_page_config(
    layout="wide",
    initial_sidebar_state="expanded",
    page_title="Tu Aplicación",
    page_icon=":chart_with_upwards_trend:"
)










df_positive_reviews = df_reviews[df_reviews['sentiment'] > 0]

grouped_data = df_reviews.groupby(pd.Grouper(key='date', freq='3M')).agg(
    total_reviews=('sentiment', 'count'),
    positive_reviews=('sentiment', lambda x: (x > 0).sum())
)

grouped_data['PRP'] = (grouped_data['positive_reviews'] / grouped_data['total_reviews']) * 100

growth_rate = 0.02
target_percentage = 90
quarters_to_target = (target_percentage - grouped_data['PRP'].iloc[-1]) / (growth_rate * 100)
date_range = pd.date_range(start=grouped_data.index[-1], periods=int(quarters_to_target * 4) + 1, freq='M')
projected_data = pd.DataFrame(index=date_range)
projected_data['PRP'] = [min(grouped_data['PRP'].iloc[-1] + (growth_rate * 100 * i), target_percentage) for i in range(1, len(projected_data) + 1)]


fig = px.line(grouped_data, x=grouped_data.index, y='PRP',
              labels={'PRP': 'Porcentaje de Reseñas Positivas (%)'},
              title='Porcentaje de Reseñas Positivas (PRP) cada 3 meses',
              markers=True)


fig.add_scatter(x=projected_data.index, y=projected_data['PRP'], mode='lines', line=dict(dash='dash'),
                #name=f'Proyección ({growth_rate*100}% Crecimiento por Trimestre hasta {target_percentage}%)'
                )












negative_reviews = df_reviews[df_reviews['sentiment'] < 0]


threshold_95 = negative_reviews.shape[0] * 0.95


fig_reviews = px.bar(
    x=['Total de Reseñas', 'Reseñas Negativas'],
    y=[df_reviews.shape[0], negative_reviews.shape[0]],
    labels={'y': 'Cantidad de Reseñas', 'x': 'Tipo de Reseña'},
    title='Total de Reseñas y Reseñas Negativas',
)


fig_reviews.add_shape(
    type='line',
    x0=-0.5,
    y0=threshold_95,
    x1=1.5,
    y1=threshold_95,
    line=dict(color='red', dash='dash'),
    name='Umbral del 95% para Reseñas Negativas'
)







family_reviews = df_reviews[df_reviews['company'] == 'En familia']


family_reviews.set_index('date', inplace=True)


average_sentiment_by_month = family_reviews['sentiment'].resample('M').mean()


fig_sent = px.line(average_sentiment_by_month, x=average_sentiment_by_month.index, y=average_sentiment_by_month.values,
              labels={'y': 'Promedio de Sentimiento'},
              title='Promedio Mensual de Sentimiento para Reseñas de Familias')






positive_usa_reviews = df_reviews[(df_reviews['sentiment'] > 0) & (df_reviews['nationality'] == 'Estados Unidos')]


positive_usa_reviews['quarter'] = positive_usa_reviews['date'].dt.to_period("Q")
df_reviews['quarter'] = df_reviews['date'].dt.to_period("Q")


percentage_positive_usa_by_quarter = (
    positive_usa_reviews.groupby('quarter').size() / df_reviews[df_reviews['nationality'] == 'Estados Unidos'].groupby('quarter').size()
) * 100


projected_data_usa_six_months = pd.DataFrame(index=pd.date_range(start=percentage_positive_usa_by_quarter.index[-1].to_timestamp(), periods=7, freq='M'))

growth_rate_usa_six_months = 0.07  # 7% de crecimiento en 6 meses
target_percentage_usa_six_months = round(percentage_positive_usa_by_quarter.iloc[-1] + growth_rate_usa_six_months * 100, 2)


projected_data_usa_six_months['Satisfaction Index'] = (
    percentage_positive_usa_by_quarter.iloc[-1] +
    np.arange(1, len(projected_data_usa_six_months) + 1) * growth_rate_usa_six_months * 100
)


projected_data_usa_six_months['Satisfaction Index'] = np.minimum(
    projected_data_usa_six_months['Satisfaction Index'], target_percentage_usa_six_months
)

fig_usa_six_months = px.line(
    x=percentage_positive_usa_by_quarter.index.to_timestamp(),
    y=percentage_positive_usa_by_quarter.values,
    labels={'y': 'Porcentaje de Reseñas Positivas', 'x': 'Año'},
    title='Porcentaje de Reseñas Positivas para Huéspedes Estadounidenses por Cuatrimestre con Proyección a 6 Meses'
)

fig_usa_six_months.add_scatter(
    x=[projected_data_usa_six_months.index[0], projected_data_usa_six_months.index[-1]],
    y=[percentage_positive_usa_by_quarter.iloc[-1], target_percentage_usa_six_months],
    mode='lines',
    line=dict(color='red', dash='dash'),
    name=f'Proyección (7% Crecimiento por 6 Meses hasta {target_percentage_usa_six_months}%)'
)








col1, col2 = st.columns((2, 2))
with col1:
    st.plotly_chart(fig, use_container_width=True)
    st.text("Kpi1: Aumentar el porcentaje de reseñas positivas (PRP) en un 2% cada 3 meses hasta alcanzar 90%.")
    st.plotly_chart(fig_reviews, use_container_width=True)
    st.text("Kpi3: Mantener el índice de Respuestas a Reseñas Negativas (IRRN) por encima del 95%.")



with col2:
    st.plotly_chart(fig_usa_six_months, use_container_width=True)
    st.text("KPI 2: Aumentar el índice de satisfacción de huéspedes de EEUU en los próximos 6 meses en un 7%.")
    st.plotly_chart(fig_sent, use_container_width=True)
    st.text("KPI4: Mantener el promedio mensual de sentimiento para huéspedes que vienen e




    -----------------------------------
    import streamlit as st
import pandas as pd
import numpy as np
from connect import cursor, conn
import matplotlib.pyplot as plt
import matplotlib
import seaborn as sns
from wordcloud import WordCloud
import warnings
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

warnings.filterwarnings("ignore")

clients = pd.read_csv("../files/data/usa_clients.csv", index_col=0)
clients_reviews = pd.read_csv("../files/data/usa_clients_reviews.csv", index_col=0)

clients_reviews['date'] = pd.to_datetime(clients_reviews['date'])

st.set_page_config(
    layout="wide",
    initial_sidebar_state="expanded",
    page_title="Tu Aplicación",
    page_icon=":chart_with_upwards_trend:"
)

# FILTER

# Create hotel filters
st.sidebar.markdown("### Filters")
date_range = st.sidebar.date_input("Date Range",
                                   min_value=clients_reviews['date'].min(),
                                   max_value=clients_reviews['date'].max(),
                                   value=(clients_reviews['date'].min(), clients_reviews['date'].max()))

selected_state = st.sidebar.selectbox('State', clients['state'].unique())

#cities_to_filter_by = clients['city'][clients["state"] == selected_state].unique()
#selected_cities = st.sidebar.multiselect('City', cities_to_filter_by, default=cities_to_filter_by)



# Create user filters
all_company= clients_reviews['company'].unique()
selected_company = st.sidebar.multiselect('Company', all_company, default=all_company)

all_acommodation=clients_reviews['acommodation'].unique()
selected_acommodation = st.sidebar.multiselect('Accommodation', all_acommodation,default=all_acommodation)

all_stay = list(clients_reviews['stay'].unique())
selected_stay = st.sidebar.multiselect('Stay length', all_stay, default=all_stay)

all_nationality=clients_reviews['is_american'].unique()
selected_nationality = st.sidebar.multiselect('Nationality', all_nationality,default=all_nationality)



# Filter data and calculate


filtered_clients_reviews = clients_reviews[clients_reviews["company"].isin(selected_company)]

filtered_clients_reviews['company'].dropna(inplace=True)
average_sentiment = filtered_clients_reviews['sentiment'].mean()
filtered_clients_reviews['useful'] = 0.1


# GRAFICAR
average_sentiment = 0.55
# Crear el gráfico de torta con la paleta de colores específica
if average_sentiment > 0.5:
    lista_de_colores = ["#689F38", "#8BC34A", "#9CCC65", "#AED581", "#C5E1A5"]
elif 0.5 > average_sentiment > 0:
    lista_de_colores = ["#FFB300", "#FFCA28", "#FFD54F", "#FFE082", "#FFFFFF"]
elif average_sentiment < 0:
    lista_de_colores = ["#3C0000", "#670010", "#960018", "#CB4C46", "#FF8478"]


# Group by month and calculate the average sentiment for each month
filtered_clients_reviews['month'] = filtered_clients_reviews['date'].dt.to_period('M').astype(str)
monthly_average_sentiment = filtered_clients_reviews.groupby('month')['sentiment'].mean().reset_index()

# Create the scatter plot
custom_color_scale = ['#D30F02', '#F7C20E', '#648813']
scatter_plot = px.scatter(filtered_clients_reviews, x="date", y="sentiment",
                          title='Booking reviews analysis:',
                          color='sentiment',
                          color_continuous_scale=custom_color_scale,
                          size='useful',  # Add the column you want to use for bubble size
                          opacity=0.75,
                          height=900,
                          size_max=10)

max_porciones = 5
counts = filtered_clients_reviews['acommodation'].value_counts()
categorias_principales = counts.head(max_porciones).index
filtered_clients_reviews['acommodation_agrupado'] = filtered_clients_reviews['acommodation'].where(filtered_clients_reviews['acommodation'].isin(categorias_principales), 'Otros')
torta_acommodation = px.pie(filtered_clients_reviews, names="acommodation_agrupado", height=400, hole=.5, title='Acommodation:',
                    color_discrete_sequence=lista_de_colores)
torta_acommodation.update_layout(showlegend=False)
torta_acommodation.update_traces(textinfo='label')

torta_company = px.pie(filtered_clients_reviews, names="company", height=400, hole=.5, title='Company:',
                       color_discrete_sequence=lista_de_colores)
torta_company.update_layout(showlegend=False)
torta_company.update_traces(textinfo='label')

torta_isamerican = px.pie(filtered_clients_reviews, names="is_american", height=400, hole=.5, title='Nationality:',
                       color_discrete_sequence=lista_de_colores)
torta_isamerican.update_layout(showlegend=False)
torta_isamerican.update_traces(textinfo='label')

max_porciones = 5
counts = filtered_clients_reviews['stay'].value_counts()
categorias_principales = counts.head(max_porciones).index
filtered_clients_reviews['stay_agrupado'] = filtered_clients_reviews['stay'].where(filtered_clients_reviews['stay'].isin(categorias_principales), 'Otros')
torta_stay = px.pie(filtered_clients_reviews, names="stay_agrupado", height=400, hole=.5, title='Stay lenght:',
                    color_discrete_sequence=lista_de_colores)
torta_stay.update_layout(showlegend=False)
torta_stay.update_traces(textinfo='label')


# STRUCTURE

col1, col2, col3 = st.columns((3, 1, 1))
with col3:
    st.text("")
    st.plotly_chart(torta_acommodation, use_container_width=True)
    st.plotly_chart(torta_stay, use_container_width=True)
with col2:
    st.text("")
    st.plotly_chart(torta_company, use_container_width=True)
    st.plotly_chart(torta_isamerican, use_container_width=True)
with col1:
    st.plotly_chart(scatter_plot, use_container_width=True)



col1, col2 = st.columns((3, 3))
with col1:
    st.text("")
    st.text("")
    st.text("")
    df_copy = filtered_clients_reviews.copy()
    resumenes_texto = ' '.join(df_copy['review'][df_copy['sentiment'] > 0.25].dropna())
    wordcloud = WordCloud(width=800, height=400, background_color='white', colormap='Greens').generate(resumenes_texto)
    wordcloud_image = wordcloud.to_image()
    st.image(wordcloud_image)
with col2:
    st.text("")
    st.text("")
    st.text("")
    df_copy = filtered_clients_reviews.copy()
    resumenes_texto = ' '.join(df_copy['review'][df_copy['sentiment'] < 0.25].dropna())
    wordcloud = WordCloud(width=800, height=400, background_color='white', colormap='Reds').generate(resumenes_texto)
    wordcloud_image = wordcloud.to_image()
    st.image(wordcloud_image)


    ----------------

    import streamlit as st
from connect import cursor, conn
import matplotlib.pyplot as plt
import matplotlib
import seaborn as sns
import warnings
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

warnings.filterwarnings("ignore")

usa_states = pd.read_csv("../files/data/usa_states.csv")
usa_cities = pd.read_csv("../files/data/usa_cities.csv")
clients = pd.read_csv("../files/data/usa_clients.csv", index_col=0)
california_hotels = pd.read_csv("../files/data/booking/california_hotels.csv", index_col=0)
matrix = pd.read_csv("../files/data/booking/california_hotels_similarity_matrix.csv", index_col=0)
california_hotels = california_hotels[california_hotels["avg_score"] > 10]



st.set_page_config(
    layout="wide",
    initial_sidebar_state="expanded",
    page_title="Tu Aplicación",
    page_icon=":chart_with_upwards_trend:"
)


# FILTERS

selected_state = st.sidebar.selectbox('State', ["California"])
california = usa_states[usa_states["state_id"] == "CA"]

selected_client = st.sidebar.selectbox('Client hotel', california_hotels['name'].unique())

filtered_hotel = california_hotels.loc[california_hotels['name'] == selected_client]
california_hotels['similarity'] = matrix[f"{filtered_hotel.index[0]}"]

california_hotels = california_hotels.sort_values(by='similarity', ascending=False)



# VISUALZIATION





stars_count = california_hotels['stars'].value_counts().sort_index().reset_index()
stars_count.columns = ['Estrellas', 'Cantidad']
star_count = px.bar(stars_count, x='Estrellas', y='Cantidad',
             title='Conteo de estrellas',
             labels={'Estrellas': 'Cantidad de Estrellas', 'Cantidad': 'Cantidad de Hoteles'},
             template='plotly_white')







df_prices = california_hotels[california_hotels['price'].notnull()]
price_count = px.histogram(df_prices, x='price',
                   title='Conteo de precios',
                   labels={'price': 'Precio', 'count': 'Cantidad de Hoteles'},
                   template='plotly_white')









df_avg_scores = california_hotels[california_hotels['avg_score'].notnull()]
avg_count = px.histogram(df_avg_scores, x='avg_score',
                   title='Conteo de puntaje promedio',
                   labels={'avg_score': 'Avg Score', 'count': 'Cantidad de Hoteles'},
                   template='plotly_white')





import ast
from collections import Counter
df_copy = california_hotels.copy()
df_copy['attributes'] = df_copy['attributes'].apply(lambda x: ast.literal_eval(x) if pd.notna(x) else [])
all_attributes = [attribute for sublist in df_copy['attributes'] for attribute in sublist]
attribute_counts = Counter(all_attributes)
df_attribute_counts = pd.DataFrame(list(attribute_counts.items()), columns=['Attribute', 'Count'])
df_attribute_counts = df_attribute_counts.sort_values(by='Count', ascending=False)
cat_count = px.bar(df_attribute_counts.head(10), x='Attribute', y='Count',
             title='Atributos populares',
             labels={'Count': 'Cantidad de Hoteles'},
             template='plotly_white')
cat_count.update_xaxes(showticklabels=False)











# Define color mapping for the top 25 and the rest
color_map = {
    True: 'red',  # Top 25 hotels
    False: 'lightblue'  # Rest of the hotels
}

# Create a boolean column indicating whether the hotel is in the top 25
california_hotels['top_100'] = california_hotels.index.isin(california_hotels.head(100).index)

# Plot the 3D scatter plot with color mapping
scatter = px.scatter_3d(california_hotels, x='price', y='stars', z="avg_score",
                    color="top_100", color_discrete_map=color_map)

scatter.update_layout(scene=dict(xaxis=dict(autorange="reversed")))
scatter.update_traces(marker=dict(size=3, sizemode='diameter'))
scatter.update_layout(width=800, height=500, margin=dict(t=5))  # Adjust the top margin
scatter.update(layout_coloraxis_showscale=False)




score_columns = [
    'Personal', 'Instalaciones y servicios', 'Limpieza', 'Confort',
    'Relación calidad-precio', 'Ubicación', 'WiFi Gratis'
]


hotel_data = california_hotels[california_hotels['name'] == selected_client][score_columns].transpose()
hotel_data.columns = ['Hotel Score']
hotel_data['Categoria'] = hotel_data.index


state_avg_scores = california_hotels[score_columns].mean().reset_index()
state_avg_scores.columns = ['Categoria', 'State Average Score']


combined_data = pd.merge(hotel_data, state_avg_scores, on='Categoria')
score_compare = px.bar(combined_data, x='Categoria', y=['Hotel Score', 'State Average Score'],
             labels={'value': 'Puntuación', 'variable': 'Categoría'},
             title=f'Comparación:',
             height=500,
             template='plotly_white',
             barmode='group')  # Utilizar 'group' para agrupar las barras
score_compare.update_xaxes(showticklabels=False)
score_compare.update_layout(showlegend=False)






default_center = {"lat": 36.7783, "lon": -119.4179}  # Example center for California
california_bbox = {"lon_min": -125, "lon_max": -114.13, "lat_min": 30, "lat_max": 42.0,}

cities_map = px.scatter_geo(
    california_hotels,
    lat="latitude",
    lon="longitude",
    color="top_100",  # Use the 'top_25' column to set the color
    color_discrete_map={True: "red", False: "blue"},  # Define colors for True/False values
    width=600,
    height=500,
    scope="usa",
    center=default_center,
    title='California',
)
cities_map.update_traces(
    marker=dict(line=dict(width=0)),
    opacity=0.5,  # Ajustar la opacidad
    #size_max=5  # Asignar el tamaño máximo deseado
)
cities_map.update_geos(
    center_lon=default_center["lon"],
    center_lat=default_center["lat"],
    lonaxis_range=[california_bbox["lon_min"], california_bbox["lon_max"]],
    lataxis_range=[california_bbox["lat_min"], california_bbox["lat_max"]],)












# DIAGRAMTION

col1, col2, col3= st.columns((2, 2, 4))
with col1:
    st.plotly_chart(cities_map, use_container_width=True)
    st.plotly_chart(star_count, use_container_width=True)
with col2:
    st.plotly_chart(score_compare, use_container_width=True)
    st.plotly_chart(price_count, use_container_width=True)
with col3:

    st.plotly_chart(scatter, use_container_width=True)
    subcol1, subcol2 = st.columns(2)
    with subcol1:
        st.plotly_chart(cat_count, use_container_width=True)
    with subcol2:
        st.plotly_chart(avg_count, use_container_width=True)
